#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 
 int data; 
 struct node *link; 
}; 
struct node *head; 
void beg_insert(); 
void last_insert(); 
void random_insert(); 
void begin_delete(); 
void last_delete(); 
void random_delete(); 
void search(); 
void display(); 
void main() 
{ 
 int choice = 0; 
 while (choice != 9) 
 { 
 printf("\n\n*********Main Menu*********\n"); 
 printf("\nChoose one option from the following list ...\n");
 printf("\n===============================================\n");
 printf("\n1. Insert in beginning\n2. Insert at last\n3. Insert at any random location\n4. Delete from Beginning\n5. Delete from last\n6. Delete node after specified location\n7. Search for an element\n8. Show\n9. Exit\n");
 printf("\nEnter your choice?\n");
 scanf("%d", &choice); 
 switch (choice) 
 { 
 case 1: beg_insert(); 
 break; 
 case 2: last_insert(); 
 break; 
 case 3: random_insert(); 
 break; 
 case 4: begin_delete(); 
 break; 
 case 5: last_delete(); 
 break; 
 case 6: random_delete(); 
 break; 
 case 7: search(); 
 break; 
 case 8: display(); 
 break; 
 case 9: exit(0); 
 break; 
 default: printf("Please enter valid choice.."); 
 } 
 } 
} 
void beg_insert() 
{ 
 struct node *ptr; 
 int item; 
 ptr = (struct node *) malloc(sizeof(struct node)); 
 if (ptr == NULL) 
 { 
 printf("\nOVERFLOW"); 
 } 
 else 
 { 
 printf("\nEnter value\n"); 
 scanf("%d", &item); 
 ptr->data = item; 
 ptr->link = head; 
 head = ptr; 
 printf("\nNode inserted"); 
 } 
} 
void last_insert() 
{ 
 struct node *ptr, *temp; 
 int item; 
 ptr = (struct node *) malloc(sizeof(struct node)); 
 if (ptr == NULL) 
 { 
 printf("\nOVERFLOW"); 
 } 
 else 
 { 
 printf("\nEnter value?\n"); 
 scanf("%d", &item); 
 ptr->data = item; 
 if (head == NULL) 
 { 
 ptr->link = NULL; 
 head = ptr; 
 printf("\nNode inserted"); 
 } 
 else 
 { 
 temp = head; 
 while (temp->link != NULL) 
 { 
 temp = temp->link; 
 } 
 temp->link = ptr; 
 ptr->link = NULL; 
 printf("\nNode inserted"); 
 } 
 } 
} 
void random_insert() 
{ 
 int i, loc, item; 
 struct node *ptr, *temp; 
 ptr = (struct node *) malloc(sizeof(struct node)); 
 if (ptr == NULL) 
 { 
 printf("\nOVERFLOW"); 
 } 
 else 
 { 
 printf("\nEnter element value"); 
 scanf("%d", &item); 
 ptr->data = item; 
 printf("\nEnter the location after which you want to insert "); 
 scanf("%d", &loc); 
 temp = head; 
 for (i = 0; i < loc; i++) 
 { 
 temp = temp->link; 
 if (temp == NULL) 
 { 
 printf("\ncan't insert\n"); 
 return; 
 } 
 } 
 ptr->link = temp->link; 
 temp->link = ptr; 
 printf("\nNode inserted"); 
 } 
} 
void begin_delete() 
{ 
 struct node *ptr; 
 if (head == NULL) 
 { 
 printf("\nList is empty\n"); 
 } 
 else 
 { 
 ptr = head; 
 head = ptr->link; 
 free(ptr); 
 printf("\nNode deleted from the beginning ...\n"); 
 } 
} 
void last_delete() 
{ 
 struct node *ptr, *ptr1; 
 if (head == NULL) 
 { 
 printf("\nList is empty\n"); 
 } 
 else if (head->link == NULL) 
 { 
 head = NULL; 
 free(head); 
 printf("\nOnly node of the list deleted ...\n"); 
 } 
 else 
 { 
 ptr = head; 
 while (ptr->link != NULL) 
 { 
 ptr1 = ptr; 
 ptr = ptr->link; 
 } 
 ptr1->link = NULL; 
 free(ptr); 
 printf("\nDeleted node from the last ...\n"); 
 } 
} 
void random_delete() 
{ 
 struct node *ptr, *ptr1; 
 int loc, i; 
 printf("\nEnter the location of the node after which you want to perform deletion \n"); 
 scanf("%d", &loc); 
 ptr = head; 
 for (i = 0; i < loc; i++) 
 { 
 ptr1 = ptr; 
 ptr = ptr->link; 
 if (ptr == NULL) 
 { 
 printf("\nCan't delete\n"); 
 return; 
 } 
 } 
 ptr1->link = ptr->link; 
 free(ptr); 
 printf("\nDeleted node %d\n", loc + 1); 
} 
void search() 
{ 
 struct node *ptr; 
 int item, i = 0, flag = 1; 
 ptr = head; 
 if (ptr == NULL) 
 { 
 printf("\nEmpty List\n"); 
 } 
 else 
 { 
 printf("\nEnter item which you want to search?\n"); 
 scanf("%d", &item); 
 while (ptr != NULL) 
 { 
 if (ptr->data == item) 
 { 
 printf("Item found at location %d\n", i + 1); 
 flag = 0; 
 break; 
 } 
 i++; 
 ptr = ptr->link; 
 } 
 if (flag == 1) 
 { 
 printf("Item not found\n"); 
 } 
 } 
} 
void display() 
{ 
 struct node *ptr; 
 ptr = head; 
 if (ptr == NULL) 
 { 
 printf("Nothing to print\n"); 
 } 
 else 
 { 
 printf("\nPrinting values . . . . .\n"); 
 while (ptr != NULL) 
 { 
 printf("\n%d", ptr->data); 
 ptr = ptr->link; 
 } 
 } 
} 
